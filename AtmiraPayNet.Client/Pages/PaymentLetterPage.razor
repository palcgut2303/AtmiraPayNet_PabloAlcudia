@page "/payment-letter"
@using AtmiraPayNet.Client.Interfaces
@using AtmiraPayNet.Shared
@using AtmiraPayNet.Shared.CreateRequest
@using AtmiraPayNet.Client.Services
@using CurrieTechnologies.Razor.SweetAlert2;
@inject ICountryService countryService
@inject IPaymentLetterService paymentLetterService
@inject SweetAlertService Swal


<h3>Crear emisión de carta de pago</h3>

<EditForm Model="@paymentLetterModel">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="cuentaOrigen">Cuenta Origen (formato IBAN)</label>
        <InputText class="form-control" pattern="[A-Z]{2}[0-9]{2}[A-Z0-9]{4}[0-9]{7}([A-Z0-9]?){0,16}"
               title="Ingrese un IBAN válido"
               placeholder="Ingrese un IBAN" @bind-Value="paymentLetterModel.OriginAccountIBAN" />
         <ValidationMessage For="@(() => paymentLetterModel.OriginAccountIBAN)" />
    </div>

    <div class="form-group">
        <label for="nombreBancoOrigen">Nombre Banco Origen</label>
        <InputText id="nombreBancoOrigen" class="form-control" @bind-Value="paymentLetterModel.OriginBankName" />
        <ValidationMessage For="@(() => paymentLetterModel.OriginBankName)" />
    </div>

    <div class="form-group">
        <label>Pais del Banco Origen</label>
        <select class="form-control" @onchange="OnCountrySelectedOrigin">

            <option value="">Selecciona un país</option>
            @foreach (var country in countries)
            {
                <option value="@country.name.common">@country.name.common</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(selectedCountryCurrencyOrigin))
    {
        <label>Divisa del banco origen:</label>
        <InputText id="currencyBankOrigin" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyOrigin" />
    }

    <div class="form-group">
        <label for="cpOficinaOrigen">CP Oficina Origen</label>
        <InputText id="cpOficinaOrigen" class="form-control" @bind-Value="paymentLetterModel.CP" />
        <ValidationMessage For="@(() => paymentLetterModel.CP)" />
    </div>

    <div class="form-group">
        <label for="calleOficinaOrigen">Calle Oficina Origen</label>
        <InputText id="calleOficinaOrigen" class="form-control" @bind-Value="paymentLetterModel.Street" />
        <ValidationMessage For="@(() => paymentLetterModel.Street)" />
    </div>

    <div class="form-group">
        <label for="numeroCalleOficinaOrigen">Número de calle Oficina Origen</label>
        <InputNumber id="numeroCalleOficinaOrigen" class="form-control" @bind-Value="paymentLetterModel.NumberStreet" />
        <ValidationMessage For="@(() => paymentLetterModel.NumberStreet)" />
    </div>

    <div class="form-group">
        <label for="cantidadPago">Cantidad del Pago</label>
        <InputNumber id="cantidadPago" class="form-control" @bind-Value="paymentLetterModel.PayAmount" />
        <ValidationMessage For="@(() => paymentLetterModel.PayAmount)" />
    </div>

    <div class="form-group">
        <label for="cuentaDestinatario">Cuenta Destinatario (formato IBAN)</label>
        <InputText class="form-control" pattern="[A-Z]{2}[0-9]{2}[A-Z0-9]{4}[0-9]{7}([A-Z0-9]?){0,16}"
                   title="Ingrese un IBAN válido"
                   placeholder="Ingrese un IBAN" @bind-Value="paymentLetterModel.DestinationAccountIBAN" />
        <ValidationMessage For="@(() => paymentLetterModel.DestinationAccountIBAN)" />
    </div>

    <div class="form-group">
        <label for="nombreBancoDestinatario">Nombre Banco Destinatario</label>
        <InputText id="nombreBancoDestinatario" class="form-control" @bind-Value="paymentLetterModel.DestinationBankName" />
        <ValidationMessage For="@(() => paymentLetterModel.DestinationBankName)" />
    </div>

    <div class="form-group">
        <label>Pais del Banco Destino</label>
        <select class="form-control" @onchange="OnCountrySelectedDestination">
            <label>Pais del Banco Destino</label>
            <option value="">Selecciona un país</option>
            @foreach (var country in countries)
            {
                <option value="@country.name.common">@country.name.common</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(selectedCountryCurrencyDestination))
    {
        <label>Divisa del banco destino:</label>
        <InputText id="currencyBankDestination" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyDestination" />
    }

    @if (selectedCountryCurrencyOrigin != selectedCountryCurrencyDestination)
    {
        <div class="form-group">
            <label for="cuentaIntermediaria">Cuenta Intermediaria (formato IBAN)</label>
            <InputText id="cuentaIntermediaria" class="form-control" @bind-Value="paymentLetterModel.InterBankAccountIBAN" />
            <ValidationMessage For="@(() => paymentLetterModel.InterBankAccountIBAN)" />
        </div>

        <div class="form-group">
            <label for="nombreBancoIntermediario">Nombre Banco Intermediario</label>
            <InputText id="nombreBancoIntermediario" class="form-control" @bind-Value="paymentLetterModel.InterBankName" />
            <ValidationMessage For="@(() => paymentLetterModel.InterBankName)" />
        </div>
    }

    
    <div class="mt-2 mb-2">
        <button type="submit" class="btn btn-primary" @onclick="Generate">Generar</button>
        <button class="btn btn-secondary" @onclick="SaveToDraft">Mandar a Borradores</button>
    </div>
    

</EditForm>

@code {
    private CreateRequestPaymentLetter paymentLetterModel = new CreateRequestPaymentLetter();
    List<CountryInfo> countries = new List<CountryInfo>();
    CountryInfo selectedCountryDetailsOrigin = null;
    CountryDTO selectedCountryDetailsDestination = null;
    string selectedCountryCurrencyOrigin = null;
    string selectedCountryCurrencyDestination = null;
    string selectedCountryOrigin = null;
    string selectedCountryDestination = null;

    protected override async Task OnInitializedAsync()
    {
        countries = await countryService.GetCountries();
    }

    private async void OnCountrySelectedOrigin(ChangeEventArgs e)
    {
        selectedCountryOrigin  = e.Value?.ToString();
        selectedCountryCurrencyOrigin = GetCurrencies(selectedCountryOrigin, countries);

    }

    private void OnCountrySelectedDestination(ChangeEventArgs e)
    {

        selectedCountryDestination = e.Value?.ToString();
        selectedCountryCurrencyDestination = GetCurrencies(selectedCountryDestination, countries);

    }

    private string GetCurrencies(string selectedCountryName, List<CountryInfo> countries)
    {
        foreach (var country in countries)
        {
            if (country.name.common == selectedCountryName)
            {
                var cca2 = country.cca2;

                CountryInfo paisEncontrado = countries.Find(c => c.cca2 == cca2);

                if (paisEncontrado != null)
                {

                    foreach (var currency in paisEncontrado.currencies)
                    {
                        return currency.Value.name;
                    }
                }
                else
                {
                    return "No encontrado";
                }

            }

        }

        return "No encontrado";
    }

    private async Task Generate()
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Información",
                Text = "¿Deseas generar este pago?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (resultado.IsConfirmed){
            paymentLetterModel.Status = "GENERADO";
            paymentLetterModel.DestinationCurrencyBank = selectedCountryCurrencyDestination;
            paymentLetterModel.OriginCurrencyBank = selectedCountryCurrencyOrigin;
            paymentLetterModel.OriginCountryBank = selectedCountryOrigin;
            paymentLetterModel.DestinationCountryBank = selectedCountryDestination;


            var result = await paymentLetterService.PostPaymentLetter(paymentLetterModel);

            if (result.Successful)
            {
                var respuesta = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Éxito",
                        Text = "Generado correctamente este pago",
                        Icon = SweetAlertIcon.Success
                    });

            }
            else
            {
                var respuesta = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error, no generado el pdf",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }

    }

    private async Task SaveToDraft()
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Información",
                Text = "¿Deseas mandar a borrador este pago?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (resultado.IsConfirmed)
        {
            paymentLetterModel.Status = "BORRADOR";
            paymentLetterModel.DestinationCurrencyBank = selectedCountryCurrencyDestination;
            paymentLetterModel.OriginCurrencyBank = selectedCountryCurrencyOrigin;
            paymentLetterModel.OriginCountryBank = selectedCountryOrigin;
            paymentLetterModel.DestinationCountryBank = selectedCountryDestination;

            var result = await paymentLetterService.PostPaymentLetter(paymentLetterModel);

            if (result.Successful)
            {
                var respuesta = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Éxito",
                        Text = "Mandado a borradores correctamente este pago",
                        Icon = SweetAlertIcon.Success
                    });

            }
            else
            {
                var respuesta = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error, no mandado a borradores el pdf",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        

    }
}
