@page "/payment-letter"
@page "/payment-letter/{idPayment:int}"
@using IbanNet


@inject ICountryService countryService
@inject IPaymentLetterService paymentLetterService
@inject NavigationManager NavigationManager
@inject HttpClient Http

@inject SweetAlertService Swal

@attribute [Authorize(Roles = "Empleado")]

<style>
    .card-title {
        font-size: 25px;
        font-weight: bold;
    }
</style>

<h3>@title</h3>

<EditForm Model="@paymentLetterModel">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-title text-center w-100">
            Cuenta Origen
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="cuentaOrigen">Cuenta Origen (formato IBAN)</label>
                <InputText class="form-control" readonly=@(isGenerate)
                           title="Ingrese un IBAN válido"
                           placeholder="Ingrese un IBAN" @bind-Value="paymentLetterModel.OriginAccountIBAN"
                           oninput="" />
                <ValidationMessage For="@(() => paymentLetterModel.OriginAccountIBAN)" />
            </div>

            <div class="form-group">
                <label for="nombreBancoOrigen">Nombre Banco Origen</label>

                <InputText id="nombreBancoOrigen" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.OriginBankName" />
                <ValidationMessage For="@(() => paymentLetterModel.OriginBankName)" />

            </div>

            <div class="form-group">
                <label>Pais del Banco Origen</label>
                @if (isGenerate)
                {
                    <InputText id="currencyBankOrigin" readonly="readonly" class="form-control" @bind-Value="@paymentLetterModel.OriginCountryBank" />

                }
                else
                {
                    <select class="form-control" @onchange="OnCountrySelectedOrigin" value="@selectedCountryOrigin">

                        <option value="">Selecciona un país</option>
                        @foreach (var country in countries)
                        {
                            <option value="@country.name.common">@country.name.common</option>
                        }
                    </select>
                }

            </div>
            @if (idPayment != 0)
            {
                <label>Divisa del banco origen:</label>
                @if (isGenerate)
                {
                    <InputText id="nombreBancoOrigen" readonly="readonly" class="form-control" @bind-Value="paymentLetterModel.OriginCurrencyBank" />

                }
                else
                {
                    <InputText id="currencyBankOrigen" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyOrigin" />

                }
            }
            else
            {
                @if (!string.IsNullOrEmpty(selectedCountryCurrencyOrigin))
                {
                    <label>Divisa del banco origen:</label>
                    @if (paymentLetterModel != null && idPayment != 0 && paymentLetterModel.Status == "GENERADO")
                    {
                        <InputText id="currencyBankOrigin" readonly="readonly" class="form-control" @bind-Value="@paymentLetterModel.OriginCurrencyBank" />

                    }
                    else
                    {
                        <InputText id="currencyBankOrigin" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyOrigin" />

                    }
                }
            }
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-title text-center w-100">
            Oficina
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="cpOficinaOrigen">CP Oficina Origen</label>

                <InputText id="cpOficinaOrigen" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.CP" />
                <ValidationMessage For="@(() => paymentLetterModel.CP)" />
            </div>

            <div class="form-group">
                <label for="calleOficinaOrigen">Calle Oficina Origen</label>

                <InputText id="calleOficinaOrigen" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.Street" />
                <ValidationMessage For="@(() => paymentLetterModel.Street)" />
            </div>

            <div class="form-group">
                <label for="numeroCalleOficinaOrigen">Número de calle Oficina Origen</label>

                <InputNumber id="numeroCalleOficinaOrigen" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.NumberStreet" />
                <ValidationMessage For="@(() => paymentLetterModel.NumberStreet)" />


            </div>

            <div class="form-group">
                <label for="cantidadPago">Cantidad del Pago</label>


                <InputNumber id="cantidadPago" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.PayAmount" />

                <ValidationMessage For="@(() => paymentLetterModel.PayAmount)" />

            </div>
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-title text-center w-100">
            Cuenta Destino
        </div>
        <div class="card-body">
            <div class="form-group">
                <label for="cuentaDestinatario">Cuenta Destinatario (formato IBAN)</label>

                <InputText class="form-control" readonly=@(isGenerate)
                           title="Ingrese un IBAN válido"
                           placeholder="Ingrese un IBAN" @bind-Value="paymentLetterModel.DestinationAccountIBAN" />
                <ValidationMessage For="@(() => paymentLetterModel.DestinationAccountIBAN)" />


            </div>

            <div class="form-group">
                <label for="nombreBancoDestinatario">Nombre Banco Destinatario</label>

                <InputText id="nombreBancoDestinatario" readonly=@(isGenerate) class="form-control" @bind-Value="paymentLetterModel.DestinationBankName" />
                <ValidationMessage For="@(() => paymentLetterModel.DestinationBankName)" />



            </div>

            <div class="form-group">
                <label>Pais del Banco Destino</label>
                @if (isGenerate)
                {
                    <InputText id="currencyBankDestination" readonly="readonly" class="form-control" @bind-Value="@paymentLetterModel.DestinationCountryBank" />

                }
                else
                {
                    <select class="form-control" @onchange="OnCountrySelectedDestination" value="@selectedCountryDestination">

                        <option value="">Selecciona un país</option>
                        @foreach (var country in countries)
                        {
                            <option value="@country.name.common">@country.name.common</option>
                        }
                    </select>
                }

            </div>
            @if (idPayment != 0)
            {
                <label>Divisa del banco destino:</label>
                @if (paymentLetterModel != null && idPayment != 0 && paymentLetterModel.Status == "GENERADO")
                {
                    <InputText id="currencyBankDestination" readonly="readonly" class="form-control" @bind-Value="@paymentLetterModel.DestinationCurrencyBank" />
                }
                else
                {

                    <InputText id="currencyBankDestination" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyDestination" />


                }



            }
            else
            {
                @if (!string.IsNullOrEmpty(selectedCountryCurrencyDestination))
                {
                    <label>Divisa del banco destino:</label>
                    <InputText id="currencyBankDestination" readonly="readonly" class="form-control" @bind-Value="@selectedCountryCurrencyDestination" />


                }
            }
        </div>
    </div>

    <div class="card mt-3">


        @if (isGenerate)
        {
            @if (paymentLetterModel.InterBankName != null && paymentLetterModel.InterBankAccountIBAN != null)
            {
                <div class="card-title text-center w-100">
                    Cuenta Intermediaria
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="cuentaIntermediaria">Cuenta Intermediaria (formato IBAN)</label>
                        <InputText id="cuentaIntermediaria" readonly="readonly" class="form-control" @bind-Value="paymentLetterModel.InterBankAccountIBAN" />
                        <ValidationMessage For="@(() => paymentLetterModel.InterBankAccountIBAN)" />
                    </div>

                    <div class="form-group">
                        <label for="nombreBancoIntermediario">Nombre Banco Intermediario</label>
                        <InputText id="nombreBancoIntermediario" readonly="readonly" class="form-control" @bind-Value="paymentLetterModel.InterBankName" />
                        <ValidationMessage For="@(() => paymentLetterModel.InterBankName)" />
                    </div>
                </div>
            }

        }
        else
        {
            @if (selectedCountryCurrencyOrigin != selectedCountryCurrencyDestination)
            {
                <div class="card-title text-center w-100">
                    Cuenta Intermediaria
                </div>
                <div class="card-body">
                    <div class="form-group">

                        <label for="cuentaIntermediaria">Cuenta Intermediaria (formato IBAN)</label>
                        <InputText id="cuentaIntermediaria" class="form-control" @bind-Value="paymentLetterModel.InterBankAccountIBAN" />
                        <ValidationMessage For="@(() => paymentLetterModel.InterBankAccountIBAN)" />
                    </div>

                    <div class="form-group">
                        <label for="nombreBancoIntermediario">Nombre Banco Intermediario</label>
                        <InputText id="nombreBancoIntermediario" class="form-control" @bind-Value="paymentLetterModel.InterBankName" />
                        <ValidationMessage For="@(() => paymentLetterModel.InterBankName)" />
                    </div>
                </div>
            }

        }

    </div>




    @if (isGenerate)
    {
        <div class="mt-2 mb-2">
            <a class="btn btn-primary" href="paymentletterview">Cerrar</a>
        </div>
    }
    else
    {
        <div class="mt-2 mb-2">
            <button type="submit" class="btn" style="background-color: rgb(222, 29, 122); color: white;" @onclick="@(()=>Submit("GENERADO"))">Generar</button>
            <button class="btn btn-secondary" @onclick="@(()=>Submit("BORRADOR"))">Guardar Borrador</button>
        </div>
    }



</EditForm>

@code {
    [Parameter]
    public int idPayment { get; set; } = 0;

    ResponseAPI<CreateRequestPaymentLetter> responseAPI = new ResponseAPI<CreateRequestPaymentLetter>();

    private CreateRequestPaymentLetter paymentLetterModel = new CreateRequestPaymentLetter();

    List<CountryInfo> countries = new List<CountryInfo>();
    List<CountryInfo> countriesOrder = new List<CountryInfo>();

    CountryInfo selectedCountryDetailsOrigin = null;
    CountryDTO selectedCountryDetailsDestination = null;
    string selectedCountryCurrencyOrigin = null;
    string selectedCountryCurrencyDestination = null;
    string selectedCountryOrigin = null;
    string selectedCountryDestination = null;
    string cca2SelectedCountryOrigin = null;
    string cca2SelectedCountryDestination = null;

    string bankNameOrigin = "";
    string bankNameDestination = "";
    string bankNameIntermediary = "";

    string btnText = "";
    string title = "";

    bool isGenerate = false;

    protected override async Task OnInitializedAsync()
    {
        countries = await countryService.GetCountries();
        countries = countries.OrderBy(c => c.name.common).ToList();
        isGenerate = false;

        if (idPayment != 0)
        {
            title = "Editar/Ver Registro";
            responseAPI = await paymentLetterService.GetPaymentLetterById(idPayment);
            paymentLetterModel = responseAPI.Value!;
            if (paymentLetterModel.Status == "GENERADO")
            {
                isGenerate = true;
            }
            else
            {
                isGenerate = false;
            }
            selectedCountryCurrencyOrigin = GetCurrencies(paymentLetterModel.OriginCountryBank, countries);
            selectedCountryCurrencyDestination = GetCurrencies(paymentLetterModel.DestinationCountryBank, countries);
            selectedCountryDestination = paymentLetterModel.DestinationCountryBank;
            selectedCountryOrigin = paymentLetterModel.OriginCountryBank;



        }
        else
        {
            title = "Crear Emision de Pago";

        }

    }


    private async void OnCountrySelectedOrigin(ChangeEventArgs e)
    {
        selectedCountryOrigin = e.Value?.ToString();
        selectedCountryCurrencyOrigin = GetCurrencies(selectedCountryOrigin, countries);
        cca2SelectedCountryOrigin = GetCca2SelectedCountry(selectedCountryOrigin, countries);
    }

    private void OnCountrySelectedDestination(ChangeEventArgs e)
    {

        selectedCountryDestination = e.Value?.ToString();
        selectedCountryCurrencyDestination = GetCurrencies(selectedCountryDestination, countries);
        cca2SelectedCountryDestination = GetCca2SelectedCountry(selectedCountryDestination, countries);
    }

    private string GetCurrencies(string selectedCountryName, List<CountryInfo> countries)
    {
        foreach (var country in countries)
        {
            if (country.name.common == selectedCountryName)
            {
                var cca2 = country.cca2;

                CountryInfo paisEncontrado = countries.Find(c => c.cca2 == cca2);

                if (paisEncontrado != null)
                {

                    foreach (var currency in paisEncontrado.currencies)
                    {
                        return currency.Value.name;
                    }
                }
                else
                {
                    return "No encontrado";
                }

            }

        }

        return "No encontrado";
    }

    private string GetCca2SelectedCountry(string selectedCountryName, List<CountryInfo> countries)
    {
        foreach (var country in countries)
        {
            if (country.name.common == selectedCountryName)
            {
                return country.cca2;
            }
        }

        return "No encontrado";
    }

    private async Task Submit(string tipoDocumento)
    {

        if (idPayment == 0)
        {
            paymentLetterModel.DestinationCurrencyBank = selectedCountryCurrencyDestination;
            paymentLetterModel.OriginCurrencyBank = selectedCountryCurrencyOrigin;
            paymentLetterModel.OriginCountryBank = selectedCountryOrigin;
            paymentLetterModel.DestinationCountryBank = selectedCountryDestination;
        }


        if (idPayment != 0)
        {
            cca2SelectedCountryOrigin = GetCca2SelectedCountry(selectedCountryOrigin, countries);
            cca2SelectedCountryDestination = GetCca2SelectedCountry(selectedCountryDestination, countries);
        }

        var isCorrect = CheckedCca2(paymentLetterModel.OriginAccountIBAN, paymentLetterModel.DestinationAccountIBAN,
                                    cca2SelectedCountryOrigin, cca2SelectedCountryDestination);


        var result = new ResponseAPI<PaymentLetterDTO>();

        if ((selectedCountryCurrencyOrigin != selectedCountryCurrencyDestination) && (paymentLetterModel.InterBankAccountIBAN == null || paymentLetterModel.InterBankName == null))
        {
            var respuesta = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Rellena los campos del Banco Intermediario",
                    Icon = SweetAlertIcon.Error
                });
        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Información",
                    Text = $"¿Deseas {(tipoDocumento == "GENERADO" ? "generar" : "mandar a borradores")} este pago?",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });

            if (resultado.IsConfirmed)
            {
                if (isCorrect)
                {
                        if (idPayment != 0)
                        {
                            paymentLetterModel.Status = tipoDocumento;
                            result = await paymentLetterService.PutPaymentLetter(paymentLetterModel, idPayment);

                        }
                        else
                        {
                            paymentLetterModel.Status = tipoDocumento;
                            result = await paymentLetterService.PostPaymentLetter(paymentLetterModel);

                        }

                        if (result.Successful)
                        {

                            var respuesta = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Éxito",
                                    Text = $"{(tipoDocumento == "GENERADO" ? "Generado" : "Mandado a borradores")} correctamente este pago",
                                    Icon = SweetAlertIcon.Success
                                });

                            NavigationManager.NavigateTo("/paymentletterview");


                        }
                        else
                        {
                            var respuesta = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Error",
                                    Text = result.Message,
                                    Icon = SweetAlertIcon.Error
                                });

                        }
                }
                else
                {

                    var respuesta = await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Error, el cca2 no coincide con el codigo del iban",
                            Icon = SweetAlertIcon.Error
                        });

                }
            }
            else
            {
                return;
            }


        }


    }

    private bool CheckedCca2(string ibanOrigin, string ibanDestination, string cca2Origin, string cca2Destination)
    {

        if (ibanOrigin == null || ibanDestination == null || cca2Origin == null || cca2Destination == null)
        {
            return false;
        }

        if (ibanOrigin.Substring(0, 2) == cca2Origin && ibanDestination.Substring(0, 2) == cca2Destination)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
