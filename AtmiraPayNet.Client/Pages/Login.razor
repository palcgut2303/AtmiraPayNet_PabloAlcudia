@page "/login"

@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<PageTitle>Login</PageTitle>


<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    @if (ShowErrors)
    {
        <div class="alert alert-danger" role="alert">
            <p>@Error</p>
        </div>
    }

    <div class="d-flex flex-row align-items-center mb-4">
        <i class="bi bi-envelope-at-fill me-3"></i>
        <div data-mdb-input-init class="form-outline flex-fill mb-0">
            <InputText Id="emailLogin" Class="form-control" @bind-Value="loginModel.Email" />
            <ValidationMessage For="@(() => loginModel.Email)" />
            <label class="form-label" for="form3Example3c">Email</label>
        </div>
    </div>

    <div class="d-flex flex-row align-items-center mb-4">
        <i class="bi bi-lock-fill me-3"></i>
        <div data-mdb-input-init class="form-outline flex-fill mb-0">
            <InputText Id="passwordLogin" type="password" Class="form-control" @bind-Value="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
            <label class="form-label" for="form3Example4c">Password</label>
        </div>
    </div>
    <span><a href="register">¿No tienes una cuenta?, Registrate aquí</a></span>

    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">

        <button id="btnLogin" type="submit" class="btn" style="background-color: rgb(222, 29, 122); color: white;">Iniciar Sesion</button>
    </div>


</EditForm>

@code {
    private LoginDTO loginModel = new LoginDTO();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {

            NavigationManager.NavigateTo("/");
            // await JSRuntime.InvokeVoidAsync("location.reload");
        }
        else
        {
            Error = result.Error!;
            ShowErrors = true;
        }
    }
}
